<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
	<!--jvar_gr is our variable, name of returns object doesn't matter  -->
	<g2:evaluate object="true" var="jvar_gr" jelly="true">
		//g2 allows to use "current" object on our scrpits, if we just use <g:evalueta> tag, will throws an error "current is not define"
		//This block make a search of all case task (sn_imt_tracing_case_task) related to current case (sn_imt_tracing_case)
		var casegr = new GlideRecord("sn_imt_tracing_case_task");
		casegr.addQuery("exposure_case",current.sys_id);
		casegr.query();
		var taskList = "";
		while(casegr.next()){
			taskList=taskList+casegr.sys_id+",";
		}
		gs.info(taskList);
		var gr = new GlideRecord("asmt_assessment_instance");
		gr.addQuery('trigger_id','IN',taskList);
		gr.query();
		gs.info(gr.getRowCount());
		gr;
		//returns gliderecord object, we don't have to use "return" statement.  
	</g2:evaluate>
	<table id="customers">
		<thead>
			<tr>
			  <th scope="col">Survey</th>
			  <th scope="col">Answer</th>
			</tr>
		</thead>
		<tbody>
			<!--jvar_gr is a glideRecord. So, we can use GlideRecord funtions -->
			<!--Is important to highlight that jelly version one <g:evaluate> and Jelly Extended version <g2:evaluate> have different scopes. 
			So, you only have access to variable defined in his specific Jelly version. -->
			<j2:while test="$[jvar_gr.next()]">
			<!--while cicle, test is the condition -->
				<!--jvar_gr is a glideRecord. So, we can use GlideRecord funtions -->
				<j2:set var="jvar_metric" value="$[jvar_gr.getValue('metric_type')]"/>
				<!--Attribute jelly="true" allows access to Jelly object. This object have jelly variables. This feature is only in <g2>-->
				<g2:evaluate object="true" var="jvar_name" jelly="true">
					var metricgr = new GlideRecord("asmt_metric_type");
					//gs.info(jelly.jvar_metric);
					metricgr.get(jelly.jvar_metric);
					//gs.info(metricgr.name);
					var name = metricgr.name;
					name;
				</g2:evaluate>
					<tr>
						<td>$[jvar_name]</td>
						<td>
							<input type="button" onclick="showSurvey('$[jvar_gr.getValue('sys_id')]','$[jvar_gr.getValue('metric_type')]');" value="view"></input>
							<!--${} -> allow access to <g> jelly variables and $[] -> alllows access to Extended version -->
						</td>
					</tr>
			</j2:while>	
		</tbody>
	</table>
	<script language="javascript">
		function showSurvey(id,type){

	var urlAns = 'assessment_take2.do?sysparm_assessable_sysid='+id+'$[AMP]sysparm_assessable_type='+type+'$[AMP]sysparm_reader_view=true';
		//GlideOverlay is a popup window that contatins a UI page. In this example we use assessment_take2 to show survey answers. 
		var d = new GlideOverlay({
		title: "User's Response",
		iframe: urlAns,
		width:'80%',
		height: '100%',
		onAfterLoad: function() {
			var iframe = d.getIFrameElement();
			setTimeout(function(){
				iframe.height = parseInt(iframe.height)+1;
			},0);
        }
	});
	d.render();
} 
	</script>
	<style>
#customers {
  font-family: Arial, Helvetica, sans-serif;
  width: 60%;
  margin-left: auto;
  margin-right: auto;
}

#customers td, #customers th {
  border: 1px solid #ddd;
  padding: 8px;
}

#customers tr:nth-child(even){background-color: #f2f2f2;}

#customers tr:hover {background-color: #ddd;}

#customers th {
  padding-top: 12px;
  padding-bottom: 12px;
  text-align: left;
  background-color: #04AA6D;
  color: white;
}
</style>
</j:jelly>
